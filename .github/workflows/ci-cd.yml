name: CI/CD Pipeline

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]
  release:
    types: [published]

jobs:
  install-dependencies:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

  run-tests:
    runs-on: ubuntu-latest
    needs: install-dependencies
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
      - name: Install dependencies
        run: pip install -r requirements.txt
      - name: Create .env file
        run: |
          echo "MONGO_URI=${{ secrets.MONGO_URI }}" >> .env
          echo "DB_NAME=${{ secrets.DB_NAME }}" >> .env
          echo "COLLECTION_NAME=${{ secrets.COLLECTION_NAME }}" >> .env
      - name: Run tests
        run: pytest

  build:
    runs-on: ubuntu-latest
    needs: run-tests
    steps:
      - uses: actions/checkout@v4
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      - name: Build and Push Docker image to Docker Hub
        env:
          DOCKER_HUB_REPOSITORY: ${{ secrets.DOCKER_HUB_REPOSITORY }}
          IMAGE_TAG: latest
        run: |
          docker build \
            --build-arg MONGO_URI="${{ secrets.MONGO_URI }}" \
            --build-arg DB_NAME="${{ secrets.DB_NAME }}" \
            --build-arg COLLECTION_NAME="${{ secrets.COLLECTION_NAME }}" \
            -t $DOCKER_HUB_REPOSITORY:$IMAGE_TAG .
          docker push $DOCKER_HUB_REPOSITORY:$IMAGE_TAG

  deploy-staging:
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    needs: build
    steps:
      - uses: actions/checkout@v4
      - name: Deploy to Staging EC2 with Docker Compose
        uses: appleboy/ssh-action@v1.0.1
        with:
          host: ${{ secrets.STAGING_EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            # 1. Clean up all files in /home/ubuntu/app (including volumes)
            echo "Cleaning up /home/ubuntu/app directory and stopping containers..."
            if [ -d "/home/ubuntu/app" ]; then
              cd /home/ubuntu/app
              sudo docker-compose down --volumes || true # Stop and remove containers and volumes
              cd ~
              sudo rm -rf /home/ubuntu/app/* # Remove all files in the directory
            fi

            # 2. Create folder /home/ubuntu/app
            echo "Creating folder /home/ubuntu/app"
            mkdir -p /home/ubuntu/app

            # 3. cd /home/ubuntu/app folder
            echo "Changing directory to /home/ubuntu/app"
            cd /home/ubuntu/app

            # 4. Clone git repo main
            echo "Cloning repository"
            git clone https://github.com/${{ github.repository }}.git . # Assuming current repo, adjust if different
            git checkout main # Ensure we are on the main branch

            # 5. Create .env file
            echo "Creating .env file"
            echo "MONGO_URI=${{ secrets.MONGO_URI }}" > .env
            echo "DB_NAME=${{ secrets.DB_NAME }}" >> .env
            echo "COLLECTION_NAME=${{ secrets.COLLECTION_NAME }}" >> .env
            echo "IMAGE_NAME=${{ secrets.DOCKER_HUB_REPOSITORY }}" >> .env
            echo "IMAGE_TAG=latest" >> .env

            # 5.5 print .env file for debugging
            echo "Contents of .env file:"
            cat .env

            # 6. Docker compose down and remove any volume (already handled in step 1, but good to ensure here if a fresh setup)
            echo "Ensuring containers are down and volumes are removed (if any remained from prior state)..."
            sudo docker-compose down --volumes || true

            # 7. Pull docker image from repo with .env file and run docker compose build with .env file
            echo "Logging into Docker Hub and pulling latest Docker image..."
            echo "${{ secrets.DOCKER_PASSWORD }}" | sudo docker login --username ${{ secrets.DOCKER_USERNAME }} --password-stdin

            echo "Building and starting containers with docker-compose.yml and docker-compose.staging.yml..."
            sudo docker-compose -f docker-compose.yml -f docker-compose.staging.yml --env-file ./.env pull
            sudo docker-compose -f docker-compose.yml -f docker-compose.staging.yml --env-file ./.env build --no-cache
            sudo docker-compose -f docker-compose.yml -f docker-compose.staging.yml --env-file ./.env up -d --remove-orphans

            echo "Container status:"
            sudo docker-compose ps

            # 8. Docker compose logs
            echo "Displaying Docker Compose logs (last 50 lines):"
            sudo docker-compose logs --tail 50

  deploy-production:
    if: github.event_name == 'release' && github.event.action == 'published'
    runs-on: ubuntu-latest
    needs: deploy-staging
    steps:
      - uses: actions/checkout@v4
      - name: Copy files to Production EC2
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.PROD_EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_SSH_KEY }}
          source: "."
          target: "/home/ubuntu/app/"
      - name: Deploy to Production EC2 with Docker Compose
        uses: appleboy/ssh-action@v1.0.1
        with:
          host: ${{ secrets.PROD_EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            cd /home/ubuntu/app && \
            echo "${{ secrets.DOCKER_PASSWORD }}" | docker login --username ${{ secrets.DOCKER_USERNAME }} --password-stdin && \
            docker compose pull && \
            docker compose up -d --remove-orphans