name: CI/CD Pipeline

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]
  release:
    types: [published]

jobs:
  install-dependencies:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

  run-tests:
    runs-on: ubuntu-latest
    needs: install-dependencies
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
      - name: Install dependencies
        run: pip install -r requirements.txt
      - name: Create .env file
        run: |
          echo "MONGO_URI=${{ secrets.MONGO_URI }}" >> .env
          echo "DB_NAME=${{ secrets.DB_NAME }}" >> .env
          echo "COLLECTION_NAME=${{ secrets.COLLECTION_NAME }}" >> .env
      - name: Run tests
        run: pytest

  build:
    runs-on: ubuntu-latest
    needs: run-tests
    steps:
      - uses: actions/checkout@v4
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      - name: Build and Push Docker image to Docker Hub
        env:
          DOCKER_HUB_REPOSITORY: ${{ secrets.DOCKER_HUB_REPOSITORY }}
          IMAGE_TAG: latest
        run: |
          docker build \
            --build-arg MONGO_URI="${{ secrets.MONGO_URI }}" \
            --build-arg DB_NAME="${{ secrets.DB_NAME }}" \
            --build-arg COLLECTION_NAME="${{ secrets.COLLECTION_NAME }}" \
            -t $DOCKER_HUB_REPOSITORY:$IMAGE_TAG .
          docker push $DOCKER_HUB_REPOSITORY:$IMAGE_TAG

  deploy-staging:
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    needs: build
    steps:
      - uses: actions/checkout@v4
      - name: Clone or update repo on Staging EC2
        uses: appleboy/ssh-action@v1.0.1
        with:
          host: ${{ secrets.STAGING_EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            set -e
            if [ ! -d "/home/ubuntu/app/.git" ]; then
              git clone https://github.com/${{ github.repository }} /home/ubuntu/app
            else
              cd /home/ubuntu/app
              git fetch --all
              git reset --hard origin/main
            fi
            cd /home/ubuntu/app
            echo "MONGO_URI=${{ secrets.MONGO_URI }}" > .env
            echo "DB_NAME=${{ secrets.DB_NAME }}" >> .env
            echo "COLLECTION_NAME=${{ secrets.COLLECTION_NAME }}" >> .env
            echo "IMAGE_NAME=${{ secrets.DOCKER_HUB_REPOSITORY }}" >> .env
            echo "IMAGE_TAG=latest" >> .env

      - name: Deploy to Staging EC2 with Docker Compose
        uses: appleboy/ssh-action@v1.0.1
        with:
          host: ${{ secrets.STAGING_EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            cd /home/ubuntu/app
            sudo docker compose down || true
            sudo echo "${{ secrets.DOCKER_PASSWORD }}" | docker login --username ${{ secrets.DOCKER_USERNAME }} --password-stdin
            sudo docker-compose -f docker-compose.yml -f docker-compose.staging.yml --env-file ./.env pull
            sudo docker-compose -f docker-compose.yml -f docker-compose.staging.yml --env-file ./.env up -d --remove-orphans
            echo "Container status:"
            sudo docker-compose ps

  deploy-production:
    if: github.event_name == 'release' && github.event.action == 'published'
    runs-on: ubuntu-latest
    needs: deploy-staging
    steps:
      - uses: actions/checkout@v4
      - name: Copy files to Production EC2
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.PROD_EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_SSH_KEY }}
          source: "."
          target: "/home/ubuntu/app/"
      - name: Deploy to Production EC2 with Docker Compose
        uses: appleboy/ssh-action@v1.0.1
        with:
          host: ${{ secrets.PROD_EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            cd /home/ubuntu/app && \
            echo "${{ secrets.DOCKER_PASSWORD }}" | docker login --username ${{ secrets.DOCKER_USERNAME }} --password-stdin && \
            docker compose pull && \
            docker compose up -d --remove-orphans